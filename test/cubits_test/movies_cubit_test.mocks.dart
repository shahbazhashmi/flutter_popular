// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_popular/test/cubits_test/movies_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:datasource/network/api_call_type.dart' as _i6;
import 'package:flutter_popular/models/movie_search_response.dart' as _i3;
import 'package:flutter_popular/models/top_250_movies_response.dart' as _i2;
import 'package:flutter_popular/repositories/movies_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTop250MoviesResponse_0 extends _i1.SmartFake
    implements _i2.Top250MoviesResponse {
  _FakeTop250MoviesResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieSearchResponse_1 extends _i1.SmartFake
    implements _i3.MovieSearchResponse {
  _FakeMovieSearchResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRepository extends _i1.Mock implements _i4.MoviesRepository {
  @override
  _i5.Future<_i2.Top250MoviesResponse> getTop250Movies(
          {bool? mustFetch = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTop250Movies,
          [],
          {#mustFetch: mustFetch},
        ),
        returnValue: _i5.Future<_i2.Top250MoviesResponse>.value(
            _FakeTop250MoviesResponse_0(
          this,
          Invocation.method(
            #getTop250Movies,
            [],
            {#mustFetch: mustFetch},
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Top250MoviesResponse>.value(
            _FakeTop250MoviesResponse_0(
          this,
          Invocation.method(
            #getTop250Movies,
            [],
            {#mustFetch: mustFetch},
          ),
        )),
      ) as _i5.Future<_i2.Top250MoviesResponse>);
  @override
  _i5.Future<_i3.MovieSearchResponse> searchMovies(String? searchParam) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [searchParam],
        ),
        returnValue: _i5.Future<_i3.MovieSearchResponse>.value(
            _FakeMovieSearchResponse_1(
          this,
          Invocation.method(
            #searchMovies,
            [searchParam],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.MovieSearchResponse>.value(
            _FakeMovieSearchResponse_1(
          this,
          Invocation.method(
            #searchMovies,
            [searchParam],
          ),
        )),
      ) as _i5.Future<_i3.MovieSearchResponse>);
  @override
  _i5.Future<dynamic> fetchData(
    bool? mustFetch,
    _i6.ApiCallType? apiCallType,
    String? controllerName,
    dynamic requestModel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchData,
          [
            mustFetch,
            apiCallType,
            controllerName,
            requestModel,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> fetchLiveData(
    _i6.ApiCallType? apiCallType,
    String? controllerName,
    dynamic requestModel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchLiveData,
          [
            apiCallType,
            controllerName,
            requestModel,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
        returnValueForMissingStub: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}
